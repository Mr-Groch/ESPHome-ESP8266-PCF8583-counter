substitutions:
  device_name: energy_counter_deep_sleep
  friendly_name: Energy counter (deep sleep)

esphome:
  name: ${device_name}
  platform: ESP8266
  board: nodemcuv2
  includes:
    - PCF8583_counter.h
  libraries:
    - PCF8583

wifi:
  networks:
    - ssid: ssid_1
      password: !secret wifi_password
      priority: 5
    - ssid: ssid_2
      password: !secret wifi_password
      priority: 3
    - ssid: ssid_3
      password: !secret wifi_password
      priority: 1
  manual_ip:
    static_ip: 192.168.1.52
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 91.234.8.8
  power_save_mode: NONE
  output_power: 17dB
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ESP_${device_name}
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
#api:
#  password: !secret node_password

mqtt:
  broker: 192.168.1.211
  username: !secret mqtt_user
  password: !secret mqtt_password
  birth_message:
  will_message:
  on_message:
    - topic: ${device_name}/prevent_sleep_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_control
    - topic: ${device_name}/enter_sleep_mode
      then:
        - deep_sleep.enter: deep_sleep_control

ota:
  password: !secret node_password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret node_password

i2c:
  sda: D2
  scl: D1
  scan: false

deep_sleep:
  run_duration: 1s
  sleep_duration: 55s
  id: deep_sleep_control

globals:
  - id: last_count
    type: int
    restore_value: yes
    initial_value: '0'

sensor:
  - platform: custom
    lambda: |-
      auto PCF8583_counter = new PCF8583Counter(60000, 0xA0);
      App.register_component(PCF8583_counter);
      return {PCF8583_counter};
    sensors:
      name: ${friendly_name} counter
      icon: mdi:pulse
      accuracy_decimals: 0
      filters:
        - filter_out: 1666665
      on_value:
        then:
          - sensor.template.publish:
              id: power_meter
              state: !lambda |-
                int delta_count = x - id(last_count);
                if (delta_count < 0) {
                  id(last_count) = x;
                  return {};
                }
                ESP_LOGD("sensor", "Last count: %d", id(last_count));
                ESP_LOGD("sensor", "Delta count: %d", delta_count);
                id(last_count) = x;
                return (1000.0 * (delta_count / 6400.0) * (3600.0 / 60.0));
          - sensor.template.publish:
              id: energy_meter
              state: !lambda return (x / 6400.0);

  - platform: template
    name: ${friendly_name} power meter
    unit_of_measurement: 'W'
    icon: mdi:flash
    accuracy_decimals: 0
    id: power_meter

  - platform: template
    name: ${friendly_name} energy meter
    unit_of_measurement: 'kWh'
    icon: mdi:flash
    accuracy_decimals: 2
    id: energy_meter

  - platform: adc
    pin: VCC
    name: ${friendly_name} voltage
    icon: mdi:sine-wave
    update_interval: 300s
    on_value:
      then:
        - sensor.template.publish:
            id: battery
            state: !lambda return (x);
    
  - platform: template
    name: ${friendly_name} battery
    unit_of_measurement: '%'
    icon: mdi:battery
    accuracy_decimals: 0
    id: battery
    filters:
      - calibrate_polynomial:
          degree: 3
          datapoints:
            - 2.45 -> 0.0
            - 2.5 -> 10.0
            - 2.6 -> 20.0
            - 2.65 -> 50.0
            - 2.91 -> 95.0
            - 2.95 -> 99.0
            - 3.0 -> 100.0

  - platform: wifi_signal
    name: ${friendly_name} WiFi signal
    update_interval: 300s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP address
      icon: mdi:ip-network
    ssid:
      name: ${friendly_name} WiFi SSID
      icon: mdi:access-point-network
